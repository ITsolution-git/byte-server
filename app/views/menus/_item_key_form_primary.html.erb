<%
  url = item_key.new_record? ?  add_item_key_restaurant_menus_path(@restaurant) : item_key_path(item_key)
  submit_val = item_key.new_record? ? "Add Item Key" : "Update Item Key"
%>
<div class="row-fluid">
  <div class="itemKey_form_errors_container">

  </div>
  <div class="span12">
    <%= form_for item_key, :url=>url,:html=>{:id=>"item_key_form"},:remote=>true do |f| %>
      <%= f.hidden_field :image_id, id: 'image_id' %>
      <%= render partial: 'shared/select_photo', locals: { object: f.object.image, association: 'image', photo_source: @restaurant }  %>
      <div class="row-fluid">
        <div class="span8">
          <%= f.text_field :name,:rows=>"1",:placeholder=>"Menu Key Name", :tabindex => 14 %>
        </div>
        <div class="span4">
          <%= f.submit :value=>submit_val, :id=>'item_key_form_submit', :class=>"btn btn-primary span12", disable_with: "Please wait...", :tabindex => 16 %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span8">
          <%= f.text_field :description, :rows=>"1",:placeholder=>"Menu Key Description", :tabindex => 15 %>
        </div>
         <% if not item_key.new_record? %>
            <div class="span4">
              <%= link_to(submit_tag('Cancel', :type => 'button', :class => 'btn span12 btn-cancel'), cancel_itemkey_restaurant_menus_path(@restaurant), :remote => true) %>
            </div>
        <% end %>
        <%= f.hidden_field :location_id , :value => @restaurant.id %>
        <%= f.hidden_field :token , :value => item_key.token %>
      <% end %>
      </div>
      <div class="row-fluid">
        <div class="span12 edit-items-form">
          <%= render partial: 'menus/item_key_records', locals: {:item_key => item_key} %>
        </div>
      </div>

  </div>
</div>
<script type="text/javascript">
   $(".filestyle_item_key_image").filestyle({
    input: false,
    buttonText: "Choose Image",
    classInput: "input-small"
   });
  Util.checkBrower();
  var itemkeyform = Util.validate(Menu.item_key, {
    name: [
      Validate.Presence,
      [Validate.Length, {maximum: 60}]
    ],

    description: [
      Validate.Presence,
      [Validate.Length, {maximum: 30}]
    ]
  });
  $('#item_key_form_submit').click(function() {
    for (var element in itemkeyform) {
      // important check that this is objects own property
      // not from prototype prop inherited
      if(itemkeyform.hasOwnProperty(element)){
        if (itemkeyform[element].validationFailed) {
          //return false;
        }
        else if (itemkeyform[element].validationFailed == undefined) {
          $('#item_key_form').find("input[name='item_key[name]']").trigger("onblur");
          $('#item_key_form').find("input[name='item_key[description]']").trigger("onblur");
        }
      }
    }
  });
</script>
