<%
  if @item
    @item.item_photos.build
  end
  
  location_item_keys = @restaurant.item_keys.all
  item_item_keys = item.item_keys.all
  item_options = item.item_options.all
  item_item_key_ids = item_item_keys.map {|item_key| item_key.id}
  btn_value = item.new_record? ? "Create Item" : "Update Item"
  url = item.new_record? ? add_item_restaurant_menus_path(@restaurant) : menu_item_path(item)
%>
<div class="row-fluid">
  <div class="item_form_errors_container">

  </div>
  <div class="span12">
    <%= form_for setup_item(item, @restaurant.id), :url=>url,:html=>{:id=>"menu_item_form"},:remote=>true do |f| %>
      <%= f.hidden_field :token , :value => item.token %>
      <%= f.hidden_field :id %>
      <div class="row-fluid">
        <% f.object.item_photos.each_with_index do |item_photo, index| %>
          <%= f.fields_for :item_photos, item_photo do |photo| %>
            <%= photo.hidden_field :photo_id %>
            <div class="top10">

              <% if index <= 0 %>
                <%= render partial: 'shared/select_photo', locals: { object: photo.object.photo, association: "item_item_photos_attributes_#{index}_photo", photo_source: @restaurant }  %>
              <% end %>
            </div>
          <% end %>
        <% end %>
        <div class="span12" style="margin-top: 20px !important;">
          <%= f.select :item_type_id, ItemType.all.sort{|a,b| a.name <=> b.name}.collect {|x| [x.name, x.id]}.unshift(["Select an Item type", ""]),{}, class: 'span12', :tabindex => 17 %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span8">
          <%= f.text_field :name, class: 'span12', :placeholder=>"Name", :tabindex => 18 %>
        </div>
        <div class="span4">
          <%= f.text_field :price, :value => number_with_precision(f.object.price, precision: 2 ), class: 'span12', :placeholder=>"Price", :tabindex => 19 %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span12">
          <%= f.text_area :description, :rows=>"4",:placeholder=>"Description", class: 'span12', :tabindex => 20 %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span6">
          <%= f.text_field :calories, class: 'span12', :placeholder=>"Calories", :tabindex => 21 %>
        </div>
        <div class="row-fluid">
          <div class="span6">
            <%= f.text_field :redemption_value, :rows=>"1", :placeholder => "Redemption Value", class: 'span12', :tabindex => 25 %>
          </div>
        </div>
      </div>

      <div class="row-fluid">
        <div class="span12">
          <%= f.text_field :ingredients, :rows=>"1",:placeholder=>"Ingredients & Tags (Seperated by comma)", class: 'span12', :tabindex => 23 %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span12">
          <%= f.text_field :special_message, :rows=>"1",:placeholder=>"Special Message Field (20 char max)", class: 'span12', :tabindex => 24 %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span12">
          <% global_keys = ItemKey.where(:is_global => true) %><% local_keys = ItemKey.where(:location_id => @restaurant.id) %>
          <% unless global_keys.empty? && local_keys.empty? %>
            <div class="checkbox-dropdownlist">
              <span class="btn add-nested-attributes">Add Item Key</span>
              <div class="wrapper-checkbox close">
                <% unless global_keys.empty? %>
                    <div style="margin: 0 0 10px" >
                    <span class="add-nested-attributes"><small>&nbsp;&nbsp;Globals Keys</small></span><br />
                    <% global_keys.each do |gk| %>
                        <% replica_found = gk.replica_is_attached_to_menu_item( @item ) %>
                        <%= check_box "global_item_keys", "select", {:checked => replica_found, :disabled => replica_found, :class => 'nested-item nested-item-key', :multiple => true }, gk.id, nil %>
                        <%= gk.name %><br />
                    <% end %>
                    </div>
                <% end %>
                <% unless local_keys.empty? %>
                    <span class="add-nested-attributes"><small>&nbsp;&nbsp;Local Keys</small></span><br />
                    <%= f.fields_for :item_item_keys do |iik| %>
                        <%= iik.check_box :_destroy,
                                          {:checked => iik.object.persisted?, :class => 'nested-item nested-item-key'},
                                          '0', '1'
                        %>
                        <%= iik.object.item_key.name %>
                        <%= iik.hidden_field :item_key_id %><br />
                    <% end %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>

      </div>
      <div class="row-fluid">
        <div class="span12">
          <% if not ItemOption.where(:location_id => @restaurant.id, :is_deleted => 0).empty? %>
            <div class="checkbox-dropdownlist">
              <span class="btn add-nested-attributes">Add Menu Option</span>
              <div class="wrapper-checkbox close">
                <%= f.fields_for :item_item_options do |opt| %>
                  <% if opt.object.item_option.is_deleted == 0 %>
                    <%= opt.check_box :_destroy,
                          {:checked => opt.object.persisted?, :class => 'nested-item'},
                          '0', '1'
                    %>
                    <%= opt.object.item_option.name %>
                    <%= opt.hidden_field :item_option_id %><br />
                  <% end %>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <div class="row-fluid">
        <div class="span4">
          <%= f.submit :value => btn_value, :id => 'item_form_submit', :class => "btn btn-primary submit_item span11", disable_with: "Please wait...", :tabindex => 26 %>
        </div>
        <% if not item.new_record? %>
          <div class="span4">
            <%= link_to(submit_tag('Cancel', :type => 'button', :class => 'btn btn-cancel span11'), cancel_item_restaurant_menus_path(@restaurant), :remote => true) %>
          </div>
        <% end %>
      <% end %>
    </div>
    <div class="span4 edit-items-form">
      <%= render partial: 'menus/item_records', locals: {:item => item} %>
    </div>
    </div>
  </div>
  <div class="crop-helper">
    <%= render partial: 'shared/crop_helper', locals: {:model => 'item_image'} %>
  </div>
  <style type="text/css">
    #menu_item_form .add-nested-attributes {
width: 100%;
box-sizing: border-box;
}
.checkbox-dropdownlist {
#menu_item_form width: 100%;
}
#menu_item_form span.item-name-edit {
display: inline-block;
height: 19px;
overflow: hidden;
text-overflow: ellipsis;
width: 87px;
float: left;
white-space: nowrap;
}
</style>
<script type="text/javascript">
  $(".filestyle_item_image").filestyle({
    input: false,
    buttonText: "Choose Image",
    classInput: "input-small"
  });
  Util.checkBrower();
  var form_item = Util.validate(Menu.item, {
    name: [
      Validate.Presence,
      [Validate.Length, {maximum: 60}]
    ],

    description: [Validate.Presence],
    price: [
      Validate.Presence,
      Validate.Numericality,
      [Validate.Format, {
        pattern: /^(\d{1,3})\.(\d{0,2})$/,
        failureMessage: "Invalid Price number format. Use: xxx.xx"
      }]
    ],
    redemption_value: [[Validate.Numericality, {onlyInteger: true}]],
    calories: [
      [Validate.Numericality, {onlyInteger: true}],
      [Validate.Length, {maximum: 6}]
    ],
    ingredients: [[Validate.Length, {maximum: 100}]]
  });
  $('#item_form_submit').click(function() {
    for (var element in form_item) {
      // important check that this is objects own property
      // not from prototype prop inherited
      if(form_item.hasOwnProperty(element)){
        if (form_item[element].validationFailed) {
          //return false;
        }
        else if (form_item[element].validationFailed == undefined) {
          $('#menu_item_form').find("input[name='item[name]']").trigger("onblur");
          $('#menu_item_form').find("input[name='item[price]']").trigger("onblur");
          $('#menu_item_form').find("textarea[name='item[description]']").trigger("onblur");
        }
      }
    }
  });
</script>
