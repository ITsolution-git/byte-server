<%
  url = @menu.new_record? ? restaurant_menus_path(@restaurant) : restaurant_menu_path(@restaurant,@menu)
  submit_val = @menu.new_record? ? "Create Menu" : "Update Menu"
%>
<div class="row-fluid">

  <div class="menu_form_errors_container">
  </div>

  <div class="span12">
    <%= form_for setup_menu(@menu, @restaurant.id), :url=>url,:html=>{:id=>"menu_form"},:remote=>true do |f| %>
      <div class="row-fluid top20">
        <div class="span8">
          <%= f.text_field :name,:placeholder=>"Menu Name", :tabindex => 5 %>
        </div>

        <div class="span4">
          <% if @menu.published? %>
            <%= f.submit :value=>submit_val, :id=> 'menu_form_submit', 
              :class=>"btn span12", :disabled => true, :tabindex => 10 %>
          <% else %>
            <%= f.submit :value=>submit_val, :id=> 'menu_form_submit', 
              :class=>"btn btn-primary span12", disable_with: "Please wait...", :tabindex => 10 %>
          <% end %>
        </div>
      </div>

      <div class="row-fluid">

        <div class="span8">
          <%= f.select :menu_type_id, 
            MenuType.all.collect {|x| [x.name, x.id]}.unshift(["Select a Menu type", ""]),
            {}, {:tabindex => 6} %>
        </div>

        <% if not @menu.new_record? %>
          <div class="span4">
            <%= link_to(submit_tag('Cancel', :type => 'button', :class => 'btn span12 btn-cancel'), cancel_profile_restaurant_menus_path(@restaurant), :remote => true) %>
          </div>
        <% end %>
      </div>

      <div class="row-fluid">
        <div class="span8">
          <%= f.text_field :publish_email, :placeholder => "Alerts Email Address", :tabindex => 7, value: @menu.notification_emails %>
        </div>
      </div>

      <% if not Server.where(:location_id => @restaurant.id).empty? %>
        <div class="checkbox-dropdownlist">
          <span class="btn add-nested-attributes">Add Server</span>
          <div class="wrapper-checkbox close">
            <%= f.fields_for :menu_servers do |ms| %>
              <%= ms.check_box :_destroy,
                    {:checked => ms.object.persisted?, :class => 'nested-item'},
                    '0', '1'
              %>
              <%= ms.object.server.name %>
              <%= ms.hidden_field :server_id %>
              <br />
            <% end %>
          </div>
        </div>
      <% end %>

      <% if !current_user.basic? %>
        <div class="row-fluid">
          <div class="span6">
            <h6>Restaurant Alert</h6>
            <% # TODO: Refactor the options below %>
            <%= f.select :rating_grade, 
              options_for_select({'None'=>'','A+'=>'1','A'=>'2','A-'=>'3','B+'=>'4','B'=>'5','B-'=>'6','C+'=>'7','C'=>'8','C-'=>'9','D+'=>'10','D'=>'11','D-'=>'12','F'=>'13'},
              @menu.rating_grade),{},:class=>'span12', :tabindex => 9 %>
          </div>
        </div>
      <% end %>
      
    <% end %><!-- End of the form -->

  </div><!-- End of span12 div -->

  <div class="row-fluid">
    <div class="span12 edit-items-form btn-group">
      <%= render partial: 'menus/menu_records' %>
    </div>
  </div>

</div><!-- End of row-fluid div -->

<script type="text/javascript">
  var form_menu = Util.validate(Menu.menu, {
    name: [
      Validate.Presence,
      [Validate.Length, {maximum: 30}]
    ],
    publish_email: [
      [Validate.Format, {failureMessage: "Must be a valid email address!",
      pattern: /^([_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,3})+(\s?[,]\s?|$))+$/}]
    ]
  });
  $('#menu_form_submit').click(function() {
    for (var element in form_menu) {
      // important check that this is objects own property
      // not from prototype prop inherited
      if(form_menu.hasOwnProperty(element)){
        if (form_menu[element].validationFailed) {
          //return false;
        }
        else if (form_menu[element].validationFailed == undefined) {
           $('#menu_form').find("input[name='menu[name]']").trigger("onblur");
        }
      }
    }
  });
</script>
