<%
  url = @server.new_record? ? add_server_restaurant_menus_path(@restaurant) : server_path(@server)
  submit_val = @server.new_record? ? "Create Server" : "Update Server"
  server_records_is_hide = @server_array.empty? ? "hide" : ""
%>
<div class="row-fluid">
  <div class="server_form_errors_container">

  </div>
  <div class="span12">
    <%= form_for @server, :url => url,:html=>{:id => "server_form"}, :remote=>true do |f| %>
      <%= f.hidden_field :location_id , :value => @restaurant.id %>
      <%= f.hidden_field :token , :value => @server.token %>
      <%= f.hidden_field :avatar_id, id: 'avatar_id' %>
      <%= render partial: 'shared/select_photo', locals: { object: f.object.avatar, association: 'avatar', photo_source: @restaurant }  %>
      <div class="row-fluid" style="margin-top: 30px;">
        <div class="span8">
          <%= f.text_field :name,:placeholder => "Server Name", :tabindex => 2 %>
        </div>
        <div class="span4">
          <%= f.submit :value=>submit_val, id: 'server_form_submit', :class=>"btn btn-primary span12", :tabindex => 4, disable_with: "Please wait..." %>
        </div>
      </div>
      <div class="row-fluid">
        <div class="span8">
          <%= f.text_field :bio,:placeholder=>"Server Bio", :tabindex => 3 %>
        </div>
        <% if not @server.new_record? %>
        <div class="span4">
          <%= link_to(submit_tag('Cancel', :type => 'button', :class => 'btn span12 btn-cancel'), cancel_server_restaurant_menus_path(@restaurant), :remote => true) %>
        </div>
        <% end %>
      </div>
    <% end %>
      <div class="row-fluid <%= server_records_is_hide %>">
        <div class="span12 edit-items-form btn-group">
          <%= render partial: 'menus/server_records' %>
        </div>
      </div>
  </div>
</div>
<div class="crop-helper">
  <%= render partial: 'shared/crop_helper', locals: {:model => 'server_avatar'} %>
</div>
<script type="text/javascript">
  $(".filestyle_image").filestyle({
    input: false,
    buttonText: "Choose Profile Pic",
    classInput: "input-small"
  });
  Util.checkBrower();
  var form_server = Util.validate(Menu.server, {
    name: [
      Validate.Presence,
      [Validate.Length, {maximum: 16}]
    ]
  });
  $('#server_form_submit').click(function() {
    for (var element in form_server) {
      // important check that this is objects own property
      // not from prototype prop inherited
      if(form_server.hasOwnProperty(element)){
        if (form_server[element].validationFailed) {
          //return false;
        }
        else if (form_server[element].validationFailed == undefined){
          $('#server_form').find("input[name='server[name]']").trigger("onblur");
          // return false;
        }
      }
    }
  });

  // $('#server_form_submit').click(function() {
  //   for (var element in form) {
  //     console.log('@element', form[element]);
  //     // important check that this is objects own property
  //     // not from prototype prop inherited
  //     if(form.hasOwnProperty(element)){
  //       if (typeof form[element]['validationFailed'] === 'undefined') {
  //         $(".server_form_errors_container").html('<div class="alert alert-error">'
  //         + '<button type="button" class="close" data-dismiss="alert">&times;</button>'
  //         + 'Please input your data'
  //         + '</div>')
  //           .show().delay(3000).fadeOut();
  //         return false;
  //       }
  //       if (form[element]['validationFailed']) {
  //         return false;
  //       }
  //     }
  //   }
  // });
</script>
