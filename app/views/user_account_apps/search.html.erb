<div class="user_account_app_form_errors_container">
</div>
 <div id="modal_holder_user_account_app">

</div>
<div class="span12 group-header">
  <div class="btn-group btn-group-lg btn-group-user">
    <%= link_to "RP Users", search_user_accounts_path,:class=>"btn btn-primary btn-off-color" %>
    <%= link_to "App Users", search_user_account_apps_path,:class=>"btn btn-primary" %>
  </div>
  <div class="pull-right search-user-account">
    <%= form_tag  search_user_account_apps_path, :class => "" do %>

      <div class="span5">
        <%= text_field_tag :search,  @search_params, :class=>"input-block-level", :placeholder=>"Search...", :autocomplete => 'off', :id => "search_user_account" %>
      </div>
      <%= submit_tag "Submit", :class => "btnSearchUserAccount",:title=>"Go", :value => 'SEARCH' %>
  <% end %>
  </div>
</div>

<div class="pull-right">
  <%= link_to image_tag("CSV.png"), search_user_account_apps_path(format: :csv) %>
</div>

  <!-- <button type="button" class="btn btn-primary">RP User</button>
  <button type="button" class="btn btn-primary">App User</button> -->



<table class="table table-striped table-hover" id="user-table">
  <thead>
      <tr class="success">
        <th>
          <input type="checkbox" class="checkbox" id='check_all_user_app'/>
        </th>
         <th>
          Name
        </th>
        <th>
          Username
        </th>
        <th>
          Email Address
        </th>
        <th>
          Date
        </th>
        <th>
          Time
        </th>
        <th>
          Password
        </th>
        <th>
          Email
        </th>
<!--         <th>
          Account
        </th> -->
      </tr>
  </thead>
  <tbody>
    <% if !@user_accounts_app.empty? %>
      <% @user_accounts_app.each do |user_account| %>
        <tr class="user-account-<%= user_account.id %>">
          <td>
            <%= check_box_tag "user_account[]", user_account.id, false, :class => 'check_user_account_app nested-item' %>
          </td>
           <td>
            <%=user_account.first_name %>  <%=  user_account.last_name %>
          </td>
          <td>
            <%=user_account.username %>
          </td>
          <td class="email">
            <%=user_account.email %>
          </td>
          <td>

            <%= user_account.created_at.in_time_zone("#{request.cookies['timezone']}").strftime("%Y-%m-%d")%>

            <!-- <%= user_account.created_at.strftime("%m.%d.%y / %I:%M %p")%> -->
          </td>
          <td>
            <%= user_account.created_at.in_time_zone("#{request.cookies['timezone']}").strftime("%l:%M %p")%>
          </td>
          <td>
            <%= link_to 'Reset', reset_password_user_account_apps_path(user_account), :method=> :get ,:class => 'btn btn-default', :remote => true %>
          </td>
          <td>
            <button type="button" class="btn btn-default change-email-model" id="account_setting_btn" data-user-id="<%=  user_account.id %>">
                Change
            </button>
          </td>
<!--           <td class="col-account">
            <%unless user_account.nil?%>
              <% if !user_account.is_suspended.nil?%>
                <% if user_account.is_suspended == 1%>
                  <%= link_to 'Suspended',un_suspend_customer_user_account_apps_path(:customer_id => user_account.id) ,method: :get, :remote=> true, :class=>'confirm_message_btn btn btn-danger col-suspend'%>
                <% else %>
                  <%= link_to 'Suspend',suspend_customer_user_account_apps_path(:customer_id => user_account.id) ,method: :get, :remote=> true, :class=>'confirm_message_btn btn btn-default col-suspend', :style=>"color: black; width: 65px;"%>
                <% end %>
              <% else %>
                 <%= link_to 'Suspend', suspend_customer_user_account_apps_path(:customer_id => user_account.id),method: :get, :remote=> true, :class=>'confirm_message_btn btn btn-default col-suspend', :style=>"color: black; width: 65px;"%>
              <% end %>
            <% else %>
               <%= link_to 'Suspend', suspend_customer_user_account_apps_path(:customer_id => user_account.id),method: :get, :remote=> true, :class=>'confirm_message_btn btn btn-default col-suspend', :style=>"color: black; width: 65px;"%>
            <%end%>
          </td> -->
        </tr>
      <% end %>
      <% else %>
        <tr><td></td><td class="width-no-result"><h5>No Result Found</h5></td><td></td><td></td><td></td></td><td></td></tr>
    <% end %>
  </tbody>
</table>
<% if !@user_accounts_app.empty? %>
  <%= link_to 'Delete', delete_user_account_apps_path(:user_account => params[:user_account]), {:remote => true,  'data-dismiss' =>  "modal", 'aria-hidden' => 'true', :class => 'btn btn-primary', :id=>'delete_account_app', disable_with: "Please wait...",} %>
<% end %>
<%if !@user_accounts_app.blank? %>
  <div class="floatright"><%= paginate @user_accounts_app %> </div>
<% end %>

<div class="modal fade" id="new-password-modal" tabindex="-1" role="dialog" aria-labelledby="newPassworodLabel" aria-hidden="true">
  <div class="modal-dialog modal-sm">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal"><span aria-hidden="true">&times;</span><span class="sr-only">Close</span></button>
        <h4 class="modal-title" id="myModalLabel">Change Email</h4>
      </div>
      <div class="modal-body">
        <div id="email_message"></div>
        <br>
        <ul style="list-style-type: none;">
        <%= form_for :user, :html=>{:id=>"user_change_email"} do |f| %>
          <%= f.hidden_field :user_id_email %>
          <li><%= f.text_field :user_new_email, placeholder: 'Enter new email', :class=>"width_90"%></li><br />
          <li><%= f.text_field :user_new_email_confirm, placeholder: 'Confirm new email', :class=>"width_90"%></li><br />
        <% end %>
        </ul>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
        <button type="button" class="btn btn-primary submit_change_email">Submit</button>
      </div>
    </div>
  </div>
</div>

<% content_for :scripts do %>
  <script type="text/javascript">
    (function() {
      $(document).ready(function() {
        if($(".alert-success").length!=0){
          $(".alert-success").delay(3000).fadeOut();
        }
        $("#delete_account_app").on('click', function(){
          var ids = [];
          $('.check_user_account_app:checked').each(function() {
            ids.push($(this).val());
          });
          var useraccount_lst = ids.join(",");
          $(this).attr('href', $(this).attr('href') + "?user_account=" + useraccount_lst);
         //alert("OK:" + $(this).attr('href'));
        });

        //-----------------------
        var COOKIE_COM_KEY = 'sort_account_app';
        function getCookieSortList(cookieKey){
            var sortCondition = undefined;
            if (!jQuery.cookie(cookieKey)){
              sortCondition = [];
            } else{
              sortCondition = JSON.parse(jQuery.cookie(cookieKey));
            }
            jQuery.cookie(cookieKey, JSON.stringify(sortCondition));
            // console.log("SORT COOKIE:", sortCondition);
            return sortCondition;
        }

        function updateSortListToUI(tableId, sortList){
            // console.log("UPDATE:", JSON.stringify([sortList]));
            if (sortList.length > 0) {
              $(tableId).trigger("sorton", [sortList]);
            }
        }

        function updateSortListData(sortList, sortDefault, index, cookieKey){
            var isUpdate = false;
            // console.log("IDX:", index);

            if (sortDefault && sortDefault.hasOwnProperty(index) && sortDefault[index] && sortDefault[index].hasOwnProperty('sorter') && sortDefault[index]['sorter'] == false){
                // console.log("This field is not sort");
            } else{
                if (sortList && sortList.length > 0){
                  // console.log("SORT LIST LENGTH:", sortList.length);

                  for (var i = 0; i < sortList.length; i++) {
                    // console.log("SORT LIST 2:", sortList[i]);
                    var sortItem = sortList[i];
                    if (sortItem[0] == index){
                      var direction = sortItem[1];
                      if (direction == 0){
                        direction = 1;
                      } else{
                        direction = 0;
                      }
                      sortList[i] = [index, direction];
                      isUpdate = true;
                    }
                  };
                }
                if (!isUpdate){
                  sortList = [];
                  sortList.push([index, 0]);
                }
            }
            // console.log("SORT LIST:", JSON.stringify(sortList));
            jQuery.cookie(cookieKey, JSON.stringify(sortList));
            return sortList;
        }

        var sortList = getCookieSortList(COOKIE_COM_KEY);
        var sortDefault = {
            0:{sorter: false,},
            1:{
               sortInitialOrder: "desc",
            },
            2:{
                    sorter: 'positions',
                    sortInitialOrder: 'desc'
                },
            3:{
               sortInitialOrder: "desc",
            },
            4:{
               sortInitialOrder: "desc",
            },
            5:{ sorter: false },
            6:{ sorter: false },
            7:{ sortInitialOrder: "esc", },
        };
        $("#user-table").tablesorter({
          headers: sortDefault,
          emptyTo: 'bottom',
          // textExtraction:function(s){
          //   // if ($(s).find('.col-account .col-suspend')) {
          //   //   if ($(s).find('.col-account .col-suspend').text() === 'Suspend') {
          //   //   return 0;
          //   //   }else{
          //   //     return 1;
          //   //   };
          //   // };
          //   return $(s).text();
          // }
        });

        updateSortListToUI("#user-table", sortList);
        $("#user-table thead th").on("click", function(){
          sortList = updateSortListData(sortList, sortDefault, $(this).index(), COOKIE_COM_KEY);
          updateSortListToUI("#user-table", sortList);
        });
        //-----------------------
      });
    })();
  </script>
<% end %>
